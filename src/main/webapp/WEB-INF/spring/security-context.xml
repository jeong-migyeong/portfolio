<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
<!-- <bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean> -->
<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>

<security:http>
	<!-- 특정 URL에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정 -->
	<security:intercept-url pattern="/sample/all" access="permitAll"/>
	<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>	<!-- member를 가져야지만 접근 가능 -->
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>				<!-- admin을 가져야지만 접근 가능 -->
	
	<!-- <security:access-denied-handler error-page="/accessError"/> -->
	<security:access-denied-handler ref="customAccessDenied"/>
	
	<!-- <security:form-login/> -->
	<!-- '/customLogin'의 호출부터 시작해서 로그인하면 사용자의 권한에 따라 다른 페이지를 호출 -->
	<security:form-login login-page="/customLogin" /><!--  authentication-success-handler-ref="customLoginSuccess"/> -->
	
	 <security:logout logout-url="/customLogout" invalidate-session="true"/>
	
	<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/> <!-- 604800=60*60*24*7 7일동안 유지 -->
</security:http>

<!-- 다양한 방식의 인증을 처리할 수 있다. -->
<security:authentication-manager>
	<security:authentication-provider user-service-ref="customUserDetailsService">
		<!-- <security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?"
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?"/> -->
		<security:password-encoder ref="bcryptPasswordEncoder"/>
		<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
		<!-- <security:user-service>
			member라는 계정 정보를 가진 사용자가 로그인을 할 수 있도록 함
			<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
			admin이라는 계정 정보를 가진 사용자는 member, admin 권한을 가진다
			<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
		</security:user-service> -->
	</security:authentication-provider>
</security:authentication-manager>

</beans>

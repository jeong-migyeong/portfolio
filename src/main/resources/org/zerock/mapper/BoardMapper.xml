<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<!-- <mapper>의 namespace 속성값을 Mapper 인터페이스와 동일한 이름을 주는 것에 주의 -->
<mapper namespace="org.zerock.mapper.BoardMapper">

	<!-- <select> 태그의 id 속성값은 메서드의 이름과 일치하게 작성 -->
	<!-- resultType 속성의 값은 select 쿼리의 결과를 특정 클래스의 객체로 만들기 위해서 설정 -->
	<select id="getList" resultType="org.zerock.domain.BoardVO">
	
		<!-- CDATA부분은 XML에서 부등호를 사용하기 위해서 사용 -->
		<![CDATA[
		select * from tbl_board where bno>0 order by bno desc
		]]>
	</select>
	
	<!-- 8.2.1 create(insert) 처리 -->
	<!-- insert만 처리되고 생성된 PK값을 알 필요가 없는 경우 -->
	<!-- 단순히 시퀀스의 다음 값을 구해서 insert할 때 사용
	추가된 데이터의 PK값을 알 수는 없지만 , 1번의 SQL처리만으로 작업이 완료되는 장점 -->
	<insert id="insert">
	<![CDATA[
		insert into tbl_board (bno, title, content, writer, ip)
		values (seq_board.nextval, #{title}, #{content}, #{writer}, #{ip})
	]]>
	</insert>
	
	<!-- insert문이 실행되고 생성된 PK값을 알아야 하는 경우 -->
	<!-- @SelectKey라는 MyBatis의 어노테이션을 이용
	주로 PK값을 미리(before) SQL을 통해서 처리해두고 특정한 이름으로 결과를 보관하는 방식
	#{bno}와 같이 이미 처리된 결과를 이용 -->
	<insert id="insertSelectKey">
		<selectKey keyProperty="bno" order="BEFORE" resultType="long">
			select seq_board.nextval from dual
		</selectKey>
		<![CDATA[
			insert into tbl_board (bno, title, content, writer, ip)
			values (#{bno}, #{title}, #{content}, #{writer}, #{ip})
		]]>
	</insert>
	
	<!-- 8.2.2 read(select) 처리 -->
	<!-- MyBatis는 bno라는 컬럼이 존재하면 인스턴스의 'setBno()'를 호출 -->
	<select id="read"  resultType="org.zerock.domain.BoardVO">
	<![CDATA[
		select * from tbl_board where bno=#{bno}
	]]>
	</select>
	
	<!-- 8.2.3 delete 처리 -->
	<delete id="delete">
	<![CDATA[
		delete from tbl_board where bno=#{bno}
	]]>
	</delete>
	
	<!-- 8.2.4 update 처리 -->
	<!-- 최종 수정시간을 현재시간으로 변경 -->
	<update id="update">
	<![CDATA[
		update tbl_board set title=#{title},
		content=#{content},
		writer=#{writer},
		updateDate=sysdate
		where bno=#{bno}
	]]>
	</update>
	
	<sql id="criteria">
	<!-- MyBatis는 원하는 속성을 찾을때 getTypeArr()과 같이 이름에 기반을 두어서 검색하기 때문에
		Criteria에서 만들어둔 getTypeArr()결과인 문자열의 배열이 <foreach>의 대상이 된다.
		<choose>안쪽의 동적 SQL은 'OR title........OR content........OR writer....' 와 같은 구문을 만든다.
		<trim>을 이용해서 맨 앞에 생성되는 'OR'를 없애준다. -->
		<trim prefix="( " suffix=") AND " prefixOverrides="OR">
			<foreach item="type" collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	
	<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
			select bno, title, content, writer, regdate, updatedate, replycnt, hit
			from (
				select /*+ INDEX_DESC(tbl_board pk_board) */ 
					rownum rn, bno, title, content, writer, regdate, updatedate, replycnt, hit
				from tbl_board
				where
		]]>
		<include refid="criteria"></include>
		<![CDATA[
				rownum <= #{pageNum}*#{amount}
			)
			where rn > (#{pageNum}-1)*#{amount}
		]]>
	</select>
	
	<select id="getTotalCount" resultType="int">
		select count(*) from tbl_board
		where 
		<include refid="criteria"></include>	
		<![CDATA[	
			bno > 0
		]]>
	</select>
	
	<update id="updateReplyCnt">
	<![CDATA[	
		update tbl_board set replycnt = replycnt + #{amount}
		where bno=#{bno}
		]]>
	</update>
	
	<update id="boardHit">
	<![CDATA[	
		update tbl_board set hit = hit+1
		where bno=#{bno}
		]]>
	</update>
	
</mapper>